~Day 9~

Migrations
- set up shape/structure of database
- through migrations you go from an empty database to one with multiple tables
- "migrate:latest" calls the up function

Seeds
- put mock data into the database
- delete all current data (through written code in the seed function) and adds new data

Models
- inherit functionality from the knex tables
- define relations between tables

User.query().findBy(id)

Type Defs

Every query has a resolver
Connect graphQL system with the database
- "where graph ql meets the database"
- "map the database to graph ql"

Apollo - a library which helps developers link their JavaScript frontend to an API through GraphQL

import { ApolloProvider } from 'react-apollo;

const App = () => {
    <ApolloProvider client={client}>
        <div>
            <h2>Apollo App</h2>
        </div>
    </ApolloProvider>
}

Apollo Client - Query Tags

const UserInfo = ({ userId }) => ()
    <Query query={GET_USER} variables={{ id: userId }}>
        <div>
            <h1>User name: ${data.user.name}</h1>
            <h1>User school: ${data.user.school}</h1>
        </div>
        "section of user interface that depends on data from the backend"
    </Query>
);

--------------------   afternoon   ---------------------------------------------------------------

Mutation in Apollo Client
- like queries, done throuigh a special react component
- component takes a GraphQL mutation and variables as props
- takes advantage of a "render prop" function

<Mutation mutation={ADD_USER} variables={{ input: this.state }}>

    {(addUser, {loading, error, data}) => (
        <Button onSubmit={addUser}/>
    )}

</Mutation>

<Query query={GET_USER} variables={{userId: id}}>
{({ loading, error, data}) => {(
    if (loading) return <Loading></Loading>
)}
}


const ADD_USER = gql`
    mutation addUser...
`


